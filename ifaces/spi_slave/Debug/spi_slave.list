
spi_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  00020d14  2**0
                  CONTENTS
  4 .ARM          00000008  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b5c  08002b5c  00020d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d14  20000000  08002b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000d14  08003878  00020d14  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e5c  08003878  00020e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020d14  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020d3c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fc2  00000000  00000000  00020d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001473  00000000  00000000  00028d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  0002a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051f  00000000  00000000  0002a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013685  00000000  00000000  0002ad7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008994  00000000  00000000  0003e404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007963e  00000000  00000000  00046d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016f8  00000000  00000000  000c03d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c1ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000d14 	.word	0x20000d14
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ad0 	.word	0x08002ad0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000d18 	.word	0x20000d18
 8000104:	08002ad0 	.word	0x08002ad0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fb55 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f8cd 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f967 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f935 	bl	8000728 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CS_now = HAL_GPIO_ReadPin(GPIOB, CS);
 80004be:	4b57      	ldr	r3, [pc, #348]	; (800061c <main+0x174>)
 80004c0:	2140      	movs	r1, #64	; 0x40
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fdec 	bl	80010a0 <HAL_GPIO_ReadPin>
 80004c8:	0003      	movs	r3, r0
 80004ca:	001a      	movs	r2, r3
 80004cc:	4b54      	ldr	r3, [pc, #336]	; (8000620 <main+0x178>)
 80004ce:	601a      	str	r2, [r3, #0]
	  if (CS_now == 0 && CS_old == 1){
 80004d0:	4b53      	ldr	r3, [pc, #332]	; (8000620 <main+0x178>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d000      	beq.n	80004da <main+0x32>
 80004d8:	e098      	b.n	800060c <main+0x164>
 80004da:	4b52      	ldr	r3, [pc, #328]	; (8000624 <main+0x17c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d000      	beq.n	80004e4 <main+0x3c>
 80004e2:	e093      	b.n	800060c <main+0x164>
	    write_miso(response[0]);
 80004e4:	4b50      	ldr	r3, [pc, #320]	; (8000628 <main+0x180>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fa77 	bl	80009dc <write_miso>
	    while (1){
	      SCLK_now = HAL_GPIO_ReadPin(GPIOA, SCLK);
 80004ee:	23a0      	movs	r3, #160	; 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	2120      	movs	r1, #32
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fdd3 	bl	80010a0 <HAL_GPIO_ReadPin>
 80004fa:	0003      	movs	r3, r0
 80004fc:	001a      	movs	r2, r3
 80004fe:	4b4b      	ldr	r3, [pc, #300]	; (800062c <main+0x184>)
 8000500:	601a      	str	r2, [r3, #0]
	      CS_now = HAL_GPIO_ReadPin(GPIOB, CS);
 8000502:	4b46      	ldr	r3, [pc, #280]	; (800061c <main+0x174>)
 8000504:	2140      	movs	r1, #64	; 0x40
 8000506:	0018      	movs	r0, r3
 8000508:	f000 fdca 	bl	80010a0 <HAL_GPIO_ReadPin>
 800050c:	0003      	movs	r3, r0
 800050e:	001a      	movs	r2, r3
 8000510:	4b43      	ldr	r3, [pc, #268]	; (8000620 <main+0x178>)
 8000512:	601a      	str	r2, [r3, #0]
	      if(SCLK_now == 0 && SCLK_old == 1){
 8000514:	4b45      	ldr	r3, [pc, #276]	; (800062c <main+0x184>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d10b      	bne.n	8000534 <main+0x8c>
 800051c:	4b44      	ldr	r3, [pc, #272]	; (8000630 <main+0x188>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d107      	bne.n	8000534 <main+0x8c>
	        write_miso(response[bit_index]);
 8000524:	4b43      	ldr	r3, [pc, #268]	; (8000634 <main+0x18c>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <main+0x180>)
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	58d3      	ldr	r3, [r2, r3]
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fa54 	bl	80009dc <write_miso>
	      }
	      if(SCLK_now == 1 && SCLK_old == 0){
 8000534:	4b3d      	ldr	r3, [pc, #244]	; (800062c <main+0x184>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d119      	bne.n	8000570 <main+0xc8>
 800053c:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <main+0x188>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d115      	bne.n	8000570 <main+0xc8>
	        value = HAL_GPIO_ReadPin(GPIOA, MOSI);
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fda8 	bl	80010a0 <HAL_GPIO_ReadPin>
 8000550:	0003      	movs	r3, r0
 8000552:	001a      	movs	r2, r3
 8000554:	4b38      	ldr	r3, [pc, #224]	; (8000638 <main+0x190>)
 8000556:	601a      	str	r2, [r3, #0]
	        data[bit_index] = value;
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <main+0x18c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b36      	ldr	r3, [pc, #216]	; (8000638 <main+0x190>)
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	4b36      	ldr	r3, [pc, #216]	; (800063c <main+0x194>)
 8000562:	0092      	lsls	r2, r2, #2
 8000564:	50d1      	str	r1, [r2, r3]
	        //write_miso(response[bit_index]);
	        bit_index ++;
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <main+0x18c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <main+0x18c>)
 800056e:	601a      	str	r2, [r3, #0]
	      }
	      if (CS_now == 1 && CS_old == 0){
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <main+0x178>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d10b      	bne.n	8000590 <main+0xe8>
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <main+0x17c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d107      	bne.n	8000590 <main+0xe8>
	        if(response[31] == 1){
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <main+0x180>)
 8000582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000584:	2b01      	cmp	r3, #1
 8000586:	d10c      	bne.n	80005a2 <main+0xfa>
	          write_miso(0);
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fa27 	bl	80009dc <write_miso>
	        }
	        break;
 800058e:	e008      	b.n	80005a2 <main+0xfa>
	      }
	      SCLK_old = SCLK_now;
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <main+0x184>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <main+0x188>)
 8000596:	601a      	str	r2, [r3, #0]
	      CS_old = CS_now;
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <main+0x178>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <main+0x17c>)
 800059e:	601a      	str	r2, [r3, #0]
	      SCLK_now = HAL_GPIO_ReadPin(GPIOA, SCLK);
 80005a0:	e7a5      	b.n	80004ee <main+0x46>
	        break;
 80005a2:	46c0      	nop			; (mov r8, r8)
	    }
	    // Mode 001:
	    if(data[3] && !data[2] && !data[1]){
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <main+0x194>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d018      	beq.n	80005de <main+0x136>
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <main+0x194>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d114      	bne.n	80005de <main+0x136>
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <main+0x194>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d110      	bne.n	80005de <main+0x136>
	      for(int i=0; i<32; i=i+1){
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	e007      	b.n	80005d2 <main+0x12a>
	        response[i] = 0;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <main+0x180>)
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	0092      	lsls	r2, r2, #2
 80005c8:	2100      	movs	r1, #0
 80005ca:	50d1      	str	r1, [r2, r3]
	      for(int i=0; i<32; i=i+1){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b1f      	cmp	r3, #31
 80005d6:	ddf4      	ble.n	80005c2 <main+0x11a>
	      }
	      test = 1;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <main+0x198>)
 80005da:	2201      	movs	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
	    }
	    if(test){
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <main+0x198>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d012      	beq.n	800060c <main+0x164>
	      int_2_array(volt_measure[measure],curr_measure[measure],0);
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <main+0x19c>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <main+0x1a0>)
 80005ec:	0092      	lsls	r2, r2, #2
 80005ee:	58d0      	ldr	r0, [r2, r3]
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <main+0x19c>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <main+0x1a4>)
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	58d3      	ldr	r3, [r2, r3]
 80005fa:	2200      	movs	r2, #0
 80005fc:	0019      	movs	r1, r3
 80005fe:	f000 f953 	bl	80008a8 <int_2_array>
	      measure++;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0x19c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <main+0x19c>)
 800060a:	601a      	str	r2, [r3, #0]
	    }


	  }
	  bit_index = 0;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <main+0x18c>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
	  CS_old = CS_now;
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <main+0x178>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b03      	ldr	r3, [pc, #12]	; (8000624 <main+0x17c>)
 8000618:	601a      	str	r2, [r3, #0]
	  CS_now = HAL_GPIO_ReadPin(GPIOB, CS);
 800061a:	e750      	b.n	80004be <main+0x16>
 800061c:	50000400 	.word	0x50000400
 8000620:	20000db8 	.word	0x20000db8
 8000624:	20000dbc 	.word	0x20000dbc
 8000628:	20000000 	.word	0x20000000
 800062c:	20000dc0 	.word	0x20000dc0
 8000630:	20000dc4 	.word	0x20000dc4
 8000634:	20000dcc 	.word	0x20000dcc
 8000638:	20000dc8 	.word	0x20000dc8
 800063c:	20000dd0 	.word	0x20000dd0
 8000640:	20000e50 	.word	0x20000e50
 8000644:	20000e54 	.word	0x20000e54
 8000648:	20000080 	.word	0x20000080
 800064c:	200006c4 	.word	0x200006c4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b09f      	sub	sp, #124	; 0x7c
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	2440      	movs	r4, #64	; 0x40
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2338      	movs	r3, #56	; 0x38
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f002 fa09 	bl	8002a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	232c      	movs	r3, #44	; 0x2c
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	0018      	movs	r0, r3
 800066c:	2314      	movs	r3, #20
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f002 fa01 	bl	8002a78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	0018      	movs	r0, r3
 800067a:	2328      	movs	r3, #40	; 0x28
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f002 f9fa 	bl	8002a78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <SystemClock_Config+0xd4>)
 800068a:	401a      	ands	r2, r3
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemClock_Config+0xd0>)
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	0109      	lsls	r1, r1, #4
 8000692:	430a      	orrs	r2, r1
 8000694:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2210      	movs	r2, #16
 800069c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2201      	movs	r2, #1
 80006a2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	22a0      	movs	r2, #160	; 0xa0
 80006ae:	0212      	lsls	r2, r2, #8
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd2a 	bl	8001114 <HAL_RCC_OscConfig>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006c4:	f000 f9a6 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	212c      	movs	r1, #44	; 0x2c
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	220f      	movs	r2, #15
 80006ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2100      	movs	r1, #0
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 f8e5 	bl	80018bc <HAL_RCC_ClockConfig>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006f6:	f000 f98d 	bl	8000a14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2202      	movs	r2, #2
 80006fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fafb 	bl	8001d04 <HAL_RCCEx_PeriphCLKConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000712:	f000 f97f 	bl	8000a14 <Error_Handler>
  }
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b01f      	add	sp, #124	; 0x7c
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40007000 	.word	0x40007000
 8000724:	ffffe7ff 	.word	0xffffe7ff

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_USART2_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000734:	22e1      	movs	r2, #225	; 0xe1
 8000736:	0252      	lsls	r2, r2, #9
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fc67 	bl	8002040 <HAL_UART_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f94d 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000d30 	.word	0x20000d30
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	2414      	movs	r4, #20
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	2314      	movs	r3, #20
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f002 f96d 	bl	8002a78 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_GPIO_Init+0x114>)
 80007a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a2:	4b3e      	ldr	r3, [pc, #248]	; (800089c <MX_GPIO_Init+0x114>)
 80007a4:	2104      	movs	r1, #4
 80007a6:	430a      	orrs	r2, r1
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007aa:	4b3c      	ldr	r3, [pc, #240]	; (800089c <MX_GPIO_Init+0x114>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	2204      	movs	r2, #4
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <MX_GPIO_Init+0x114>)
 80007b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <MX_GPIO_Init+0x114>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	430a      	orrs	r2, r1
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <MX_GPIO_Init+0x114>)
 80007c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <MX_GPIO_Init+0x114>)
 80007d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_GPIO_Init+0x114>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	430a      	orrs	r2, r1
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007da:	4b30      	ldr	r3, [pc, #192]	; (800089c <MX_GPIO_Init+0x114>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	2201      	movs	r2, #1
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_GPIO_Init+0x114>)
 80007e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_GPIO_Init+0x114>)
 80007ec:	2102      	movs	r1, #2
 80007ee:	430a      	orrs	r2, r1
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <MX_GPIO_Init+0x114>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	2202      	movs	r2, #2
 80007f8:	4013      	ands	r3, r2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MISO_GPIO_Port, MISO_Pin, GPIO_PIN_RESET);
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2200      	movs	r2, #0
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fc67 	bl	80010da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	0192      	lsls	r2, r2, #6
 8000812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2284      	movs	r2, #132	; 0x84
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	193b      	adds	r3, r7, r4
 8000824:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <MX_GPIO_Init+0x118>)
 8000826:	0019      	movs	r1, r3
 8000828:	0010      	movs	r0, r2
 800082a:	f000 fabb 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	22a0      	movs	r2, #160	; 0xa0
 8000832:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	193a      	adds	r2, r7, r4
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f000 faab 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2240      	movs	r2, #64	; 0x40
 8000852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2201      	movs	r2, #1
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8000866:	193a      	adds	r2, r7, r4
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fa98 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2240      	movs	r2, #64	; 0x40
 8000878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000886:	193b      	adds	r3, r7, r4
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x11c>)
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f000 fa89 	bl	8000da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00b      	add	sp, #44	; 0x2c
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000
 80008a0:	50000800 	.word	0x50000800
 80008a4:	50000400 	.word	0x50000400

080008a8 <int_2_array>:

/* USER CODE BEGIN 4 */
void int_2_array(int voltage, int current, int power)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	// Voltage slot
    response[15] = voltage & 0b1;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2201      	movs	r2, #1
 80008b8:	401a      	ands	r2, r3
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <int_2_array+0x130>)
 80008bc:	63da      	str	r2, [r3, #60]	; 0x3c
    response[14] = (voltage >> 1) & 0b1;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	105b      	asrs	r3, r3, #1
 80008c2:	2201      	movs	r2, #1
 80008c4:	401a      	ands	r2, r3
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <int_2_array+0x130>)
 80008c8:	639a      	str	r2, [r3, #56]	; 0x38
    response[13] = (voltage >> 2) & 0b1;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	109b      	asrs	r3, r3, #2
 80008ce:	2201      	movs	r2, #1
 80008d0:	401a      	ands	r2, r3
 80008d2:	4b41      	ldr	r3, [pc, #260]	; (80009d8 <int_2_array+0x130>)
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
    response[12] = (voltage >> 3) & 0b1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	10db      	asrs	r3, r3, #3
 80008da:	2201      	movs	r2, #1
 80008dc:	401a      	ands	r2, r3
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <int_2_array+0x130>)
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
    response[11] = (voltage >> 4) & 0b1;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	111b      	asrs	r3, r3, #4
 80008e6:	2201      	movs	r2, #1
 80008e8:	401a      	ands	r2, r3
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <int_2_array+0x130>)
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
    response[10] = (voltage >> 5) & 0b1;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	115b      	asrs	r3, r3, #5
 80008f2:	2201      	movs	r2, #1
 80008f4:	401a      	ands	r2, r3
 80008f6:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <int_2_array+0x130>)
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
    response[9] = (voltage >> 6) & 0b1;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	119b      	asrs	r3, r3, #6
 80008fe:	2201      	movs	r2, #1
 8000900:	401a      	ands	r2, r3
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <int_2_array+0x130>)
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
    response[8] = (voltage >> 7) & 0b1;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	11db      	asrs	r3, r3, #7
 800090a:	2201      	movs	r2, #1
 800090c:	401a      	ands	r2, r3
 800090e:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <int_2_array+0x130>)
 8000910:	621a      	str	r2, [r3, #32]
    // Current slot
    response[23] = current & 0b1;
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	2201      	movs	r2, #1
 8000916:	401a      	ands	r2, r3
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <int_2_array+0x130>)
 800091a:	65da      	str	r2, [r3, #92]	; 0x5c
    response[22] = (current >> 1) & 0b1;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	105b      	asrs	r3, r3, #1
 8000920:	2201      	movs	r2, #1
 8000922:	401a      	ands	r2, r3
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <int_2_array+0x130>)
 8000926:	659a      	str	r2, [r3, #88]	; 0x58
    response[21] = (current >> 2) & 0b1;
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	109b      	asrs	r3, r3, #2
 800092c:	2201      	movs	r2, #1
 800092e:	401a      	ands	r2, r3
 8000930:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <int_2_array+0x130>)
 8000932:	655a      	str	r2, [r3, #84]	; 0x54
    response[20] = (current >> 3) & 0b1;
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	10db      	asrs	r3, r3, #3
 8000938:	2201      	movs	r2, #1
 800093a:	401a      	ands	r2, r3
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <int_2_array+0x130>)
 800093e:	651a      	str	r2, [r3, #80]	; 0x50
    response[19] = (current >> 4) & 0b1;
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	111b      	asrs	r3, r3, #4
 8000944:	2201      	movs	r2, #1
 8000946:	401a      	ands	r2, r3
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <int_2_array+0x130>)
 800094a:	64da      	str	r2, [r3, #76]	; 0x4c
    response[18] = (current >> 5) & 0b1;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	115b      	asrs	r3, r3, #5
 8000950:	2201      	movs	r2, #1
 8000952:	401a      	ands	r2, r3
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <int_2_array+0x130>)
 8000956:	649a      	str	r2, [r3, #72]	; 0x48
    response[17] = (current >> 6) & 0b1;
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	119b      	asrs	r3, r3, #6
 800095c:	2201      	movs	r2, #1
 800095e:	401a      	ands	r2, r3
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <int_2_array+0x130>)
 8000962:	645a      	str	r2, [r3, #68]	; 0x44
    response[16] = (current >> 7) & 0b1;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	11db      	asrs	r3, r3, #7
 8000968:	2201      	movs	r2, #1
 800096a:	401a      	ands	r2, r3
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <int_2_array+0x130>)
 800096e:	641a      	str	r2, [r3, #64]	; 0x40
    // Power slot
    response[31] = power & 0b1;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2201      	movs	r2, #1
 8000974:	401a      	ands	r2, r3
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <int_2_array+0x130>)
 8000978:	67da      	str	r2, [r3, #124]	; 0x7c
    response[30] = (power >> 1) & 0b1;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	105b      	asrs	r3, r3, #1
 800097e:	2201      	movs	r2, #1
 8000980:	401a      	ands	r2, r3
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <int_2_array+0x130>)
 8000984:	679a      	str	r2, [r3, #120]	; 0x78
    response[29] = (power >> 2) & 0b1;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	109b      	asrs	r3, r3, #2
 800098a:	2201      	movs	r2, #1
 800098c:	401a      	ands	r2, r3
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <int_2_array+0x130>)
 8000990:	675a      	str	r2, [r3, #116]	; 0x74
    response[28] = (power >> 3) & 0b1;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	10db      	asrs	r3, r3, #3
 8000996:	2201      	movs	r2, #1
 8000998:	401a      	ands	r2, r3
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <int_2_array+0x130>)
 800099c:	671a      	str	r2, [r3, #112]	; 0x70
    response[27] = (power >> 4) & 0b1;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	111b      	asrs	r3, r3, #4
 80009a2:	2201      	movs	r2, #1
 80009a4:	401a      	ands	r2, r3
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <int_2_array+0x130>)
 80009a8:	66da      	str	r2, [r3, #108]	; 0x6c
    response[26] = (power >> 5) & 0b1;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	115b      	asrs	r3, r3, #5
 80009ae:	2201      	movs	r2, #1
 80009b0:	401a      	ands	r2, r3
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <int_2_array+0x130>)
 80009b4:	669a      	str	r2, [r3, #104]	; 0x68
    response[25] = (power >> 6) & 0b1;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	119b      	asrs	r3, r3, #6
 80009ba:	2201      	movs	r2, #1
 80009bc:	401a      	ands	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <int_2_array+0x130>)
 80009c0:	665a      	str	r2, [r3, #100]	; 0x64
    response[24] = (power >> 7) & 0b1;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	11db      	asrs	r3, r3, #7
 80009c6:	2201      	movs	r2, #1
 80009c8:	401a      	ands	r2, r3
 80009ca:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <int_2_array+0x130>)
 80009cc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000000 	.word	0x20000000

080009dc <write_miso>:

void write_miso(int bit_state){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(bit_state == 0){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d106      	bne.n	80009f8 <write_miso+0x1c>
	  HAL_GPIO_WritePin(GPIOA, MISO, 0);
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fb71 	bl	80010da <HAL_GPIO_WritePin>
  }
  if(bit_state == 1){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d106      	bne.n	8000a0c <write_miso+0x30>
	  HAL_GPIO_WritePin(GPIOA, MISO, 1);
 80009fe:	23a0      	movs	r3, #160	; 0xa0
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2201      	movs	r2, #1
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 fb67 	bl	80010da <HAL_GPIO_WritePin>
  }
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <HAL_MspInit+0x24>)
 8000a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x24>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_MspInit+0x24>)
 8000a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_MspInit+0x24>)
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	0549      	lsls	r1, r1, #21
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	240c      	movs	r4, #12
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 f80c 	bl	8002a78 <memset>
  if(huart->Instance==USART2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_UART_MspInit+0x80>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d129      	bne.n	8000abe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0289      	lsls	r1, r1, #10
 8000a74:	430a      	orrs	r2, r1
 8000a76:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	430a      	orrs	r2, r1
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a90:	0021      	movs	r1, r4
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	220c      	movs	r2, #12
 8000a96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2204      	movs	r2, #4
 8000aae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	187a      	adds	r2, r7, r1
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 f973 	bl	8000da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b009      	add	sp, #36	; 0x24
 8000ac4:	bd90      	pop	{r4, r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f886 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fff7 	bl	8000afe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000b36:	f001 ffa7 	bl	8002a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fcb5 	bl	80004a8 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
   ldr   r0, =_estack
 8000b40:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	20000d14 	.word	0x20000d14
  ldr r2, =_sidata
 8000b4c:	08002b64 	.word	0x08002b64
  ldr r2, =_sbss
 8000b50:	20000d14 	.word	0x20000d14
  ldr r4, =_ebss
 8000b54:	20000e5c 	.word	0x20000e5c

08000b58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_COMP_IRQHandler>
	...

08000b5c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x3c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Init+0x3c>)
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	430a      	orrs	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f811 	bl	8000b9c <HAL_InitTick>
 8000b7a:	1e03      	subs	r3, r0, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e001      	b.n	8000b8a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b86:	f7ff ff4b 	bl	8000a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000ba6:	681c      	ldr	r4, [r3, #0]
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_InitTick+0x60>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	0019      	movs	r1, r3
 8000bae:	23fa      	movs	r3, #250	; 0xfa
 8000bb0:	0098      	lsls	r0, r3, #2
 8000bb2:	f7ff faa9 	bl	8000108 <__udivsi3>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0020      	movs	r0, r4
 8000bbc:	f7ff faa4 	bl	8000108 <__udivsi3>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f8e1 	bl	8000d8a <HAL_SYSTICK_Config>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e00f      	b.n	8000bf0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d80b      	bhi.n	8000bee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	425b      	negs	r3, r3
 8000bdc:	2200      	movs	r2, #0
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 f8be 	bl	8000d60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_InitTick+0x64>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b003      	add	sp, #12
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	20000d08 	.word	0x20000d08
 8000bfc:	20000d10 	.word	0x20000d10
 8000c00:	20000d0c 	.word	0x20000d0c

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	18d2      	adds	r2, r2, r3
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_IncTick+0x20>)
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	20000d10 	.word	0x20000d10
 8000c24:	20000e58 	.word	0x20000e58

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000e58 	.word	0x20000e58

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000c50:	d828      	bhi.n	8000ca4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c52:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	33c0      	adds	r3, #192	; 0xc0
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	589b      	ldr	r3, [r3, r2]
 8000c62:	1dfa      	adds	r2, r7, #7
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	0011      	movs	r1, r2
 8000c68:	2203      	movs	r2, #3
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	00d2      	lsls	r2, r2, #3
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	22ff      	movs	r2, #255	; 0xff
 8000c80:	401a      	ands	r2, r3
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	2303      	movs	r3, #3
 8000c8a:	4003      	ands	r3, r0
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	481f      	ldr	r0, [pc, #124]	; (8000d10 <__NVIC_SetPriority+0xd4>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	33c0      	adds	r3, #192	; 0xc0
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ca2:	e031      	b.n	8000d08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0019      	movs	r1, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	400b      	ands	r3, r1
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3306      	adds	r3, #6
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1dfa      	adds	r2, r7, #7
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	21ff      	movs	r1, #255	; 0xff
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	000a      	movs	r2, r1
 8000cd0:	43d2      	mvns	r2, r2
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	22ff      	movs	r2, #255	; 0xff
 8000cdc:	401a      	ands	r2, r3
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	4003      	ands	r3, r0
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	4023      	ands	r3, r4
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	3306      	adds	r3, #6
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	18c3      	adds	r3, r0, r3
 8000d04:	3304      	adds	r3, #4
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b003      	add	sp, #12
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1e5a      	subs	r2, r3, #1
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	045b      	lsls	r3, r3, #17
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d301      	bcc.n	8000d30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e010      	b.n	8000d52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <SysTick_Config+0x44>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	3a01      	subs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff ff7c 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x44>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x44>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	1c02      	adds	r2, r0, #0
 8000d70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff ffbf 	bl	8000d18 <SysTick_Config>
 8000d9a:	0003      	movs	r3, r0
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dba:	e155      	b.n	8001068 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	000a      	movs	r2, r1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <HAL_GPIO_Init+0x30>
 8000dd2:	e146      	b.n	8001062 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2203      	movs	r2, #3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d005      	beq.n	8000dec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2203      	movs	r2, #3
 8000de6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	2201      	movs	r2, #1
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d017      	beq.n	8000e8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2203      	movs	r2, #3
 8000e90:	4013      	ands	r3, r2
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d123      	bne.n	8000ede <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	58d3      	ldr	r3, [r2, r3]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	220f      	movs	r2, #15
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	691a      	ldr	r2, [r3, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	409a      	lsls	r2, r3
 8000ec8:	0013      	movs	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	6939      	ldr	r1, [r7, #16]
 8000edc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	401a      	ands	r2, r3
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	23c0      	movs	r3, #192	; 0xc0
 8000f18:	029b      	lsls	r3, r3, #10
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d100      	bne.n	8000f20 <HAL_GPIO_Init+0x17c>
 8000f1e:	e0a0      	b.n	8001062 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	4b57      	ldr	r3, [pc, #348]	; (8001080 <HAL_GPIO_Init+0x2dc>)
 8000f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f24:	4b56      	ldr	r3, [pc, #344]	; (8001080 <HAL_GPIO_Init+0x2dc>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2c:	4a55      	ldr	r2, [pc, #340]	; (8001084 <HAL_GPIO_Init+0x2e0>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	589b      	ldr	r3, [r3, r2]
 8000f38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	4013      	ands	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	409a      	lsls	r2, r3
 8000f46:	0013      	movs	r3, r2
 8000f48:	43da      	mvns	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d01f      	beq.n	8000f9a <HAL_GPIO_Init+0x1f6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <HAL_GPIO_Init+0x2e4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_Init+0x1f2>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a49      	ldr	r2, [pc, #292]	; (800108c <HAL_GPIO_Init+0x2e8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x1ee>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_GPIO_Init+0x2ec>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x1ea>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a47      	ldr	r2, [pc, #284]	; (8001094 <HAL_GPIO_Init+0x2f0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x1e6>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a46      	ldr	r2, [pc, #280]	; (8001098 <HAL_GPIO_Init+0x2f4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x1e2>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e00a      	b.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x1f8>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	400a      	ands	r2, r1
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2e0>)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_GPIO_Init+0x2f8>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	035b      	lsls	r3, r3, #13
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <HAL_GPIO_Init+0x2f8>)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x2f8>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43da      	mvns	r2, r3
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	039b      	lsls	r3, r3, #14
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_GPIO_Init+0x2f8>)
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x2f8>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_GPIO_Init+0x2f8>)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_GPIO_Init+0x2f8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	4013      	ands	r3, r2
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_GPIO_Init+0x2f8>)
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	40da      	lsrs	r2, r3
 8001070:	1e13      	subs	r3, r2, #0
 8001072:	d000      	beq.n	8001076 <HAL_GPIO_Init+0x2d2>
 8001074:	e6a2      	b.n	8000dbc <HAL_GPIO_Init+0x18>
  }
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	50000400 	.word	0x50000400
 800108c:	50000800 	.word	0x50000800
 8001090:	50000c00 	.word	0x50000c00
 8001094:	50001000 	.word	0x50001000
 8001098:	50001c00 	.word	0x50001c00
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	000a      	movs	r2, r1
 80010aa:	1cbb      	adds	r3, r7, #2
 80010ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	1cba      	adds	r2, r7, #2
 80010b4:	8812      	ldrh	r2, [r2, #0]
 80010b6:	4013      	ands	r3, r2
 80010b8:	d004      	beq.n	80010c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010ba:	230f      	movs	r3, #15
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e003      	b.n	80010cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010c4:	230f      	movs	r3, #15
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	781b      	ldrb	r3, [r3, #0]
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	0008      	movs	r0, r1
 80010e4:	0011      	movs	r1, r2
 80010e6:	1cbb      	adds	r3, r7, #2
 80010e8:	1c02      	adds	r2, r0, #0
 80010ea:	801a      	strh	r2, [r3, #0]
 80010ec:	1c7b      	adds	r3, r7, #1
 80010ee:	1c0a      	adds	r2, r1, #0
 80010f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f2:	1c7b      	adds	r3, r7, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d004      	beq.n	8001104 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010fa:	1cbb      	adds	r3, r7, #2
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001102:	e003      	b.n	800110c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001104:	1cbb      	adds	r3, r7, #2
 8001106:	881a      	ldrh	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f000 fbbf 	bl	80018a6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001128:	4bc9      	ldr	r3, [pc, #804]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	220c      	movs	r2, #12
 800112e:	4013      	ands	r3, r2
 8001130:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001132:	4bc7      	ldr	r3, [pc, #796]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	d100      	bne.n	800114a <HAL_RCC_OscConfig+0x36>
 8001148:	e07e      	b.n	8001248 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	2b08      	cmp	r3, #8
 800114e:	d007      	beq.n	8001160 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	2b0c      	cmp	r3, #12
 8001154:	d112      	bne.n	800117c <HAL_RCC_OscConfig+0x68>
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	429a      	cmp	r2, r3
 800115e:	d10d      	bne.n	800117c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001160:	4bbb      	ldr	r3, [pc, #748]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	029b      	lsls	r3, r3, #10
 8001168:	4013      	ands	r3, r2
 800116a:	d100      	bne.n	800116e <HAL_RCC_OscConfig+0x5a>
 800116c:	e06b      	b.n	8001246 <HAL_RCC_OscConfig+0x132>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d167      	bne.n	8001246 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	f000 fb95 	bl	80018a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	025b      	lsls	r3, r3, #9
 8001184:	429a      	cmp	r2, r3
 8001186:	d107      	bne.n	8001198 <HAL_RCC_OscConfig+0x84>
 8001188:	4bb1      	ldr	r3, [pc, #708]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4bb0      	ldr	r3, [pc, #704]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0249      	lsls	r1, r1, #9
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e027      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	23a0      	movs	r3, #160	; 0xa0
 800119e:	02db      	lsls	r3, r3, #11
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d10e      	bne.n	80011c2 <HAL_RCC_OscConfig+0xae>
 80011a4:	4baa      	ldr	r3, [pc, #680]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4ba9      	ldr	r3, [pc, #676]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	02c9      	lsls	r1, r1, #11
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	4ba7      	ldr	r3, [pc, #668]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0249      	lsls	r1, r1, #9
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e012      	b.n	80011e8 <HAL_RCC_OscConfig+0xd4>
 80011c2:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4ba2      	ldr	r3, [pc, #648]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011c8:	49a2      	ldr	r1, [pc, #648]	; (8001454 <HAL_RCC_OscConfig+0x340>)
 80011ca:	400a      	ands	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	025b      	lsls	r3, r3, #9
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4b9c      	ldr	r3, [pc, #624]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b9b      	ldr	r3, [pc, #620]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80011e2:	499d      	ldr	r1, [pc, #628]	; (8001458 <HAL_RCC_OscConfig+0x344>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d015      	beq.n	800121c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fd1a 	bl	8000c28 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011f8:	e009      	b.n	800120e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fa:	f7ff fd15 	bl	8000c28 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d902      	bls.n	800120e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	f000 fb4c 	bl	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800120e:	4b90      	ldr	r3, [pc, #576]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	029b      	lsls	r3, r3, #10
 8001216:	4013      	ands	r3, r2
 8001218:	d0ef      	beq.n	80011fa <HAL_RCC_OscConfig+0xe6>
 800121a:	e015      	b.n	8001248 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fd04 	bl	8000c28 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001226:	f7ff fcff 	bl	8000c28 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e336      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001238:	4b85      	ldr	r3, [pc, #532]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	029b      	lsls	r3, r3, #10
 8001240:	4013      	ands	r3, r2
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x112>
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001246:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2202      	movs	r2, #2
 800124e:	4013      	ands	r3, r2
 8001250:	d100      	bne.n	8001254 <HAL_RCC_OscConfig+0x140>
 8001252:	e099      	b.n	8001388 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	2220      	movs	r2, #32
 800125e:	4013      	ands	r3, r2
 8001260:	d009      	beq.n	8001276 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001262:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001268:	2120      	movs	r1, #32
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	2220      	movs	r2, #32
 8001272:	4393      	bics	r3, r2
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d005      	beq.n	8001288 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	d13e      	bne.n	8001300 <HAL_RCC_OscConfig+0x1ec>
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d13b      	bne.n	8001300 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001288:	4b71      	ldr	r3, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2204      	movs	r2, #4
 800128e:	4013      	ands	r3, r2
 8001290:	d004      	beq.n	800129c <HAL_RCC_OscConfig+0x188>
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e304      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4a6e      	ldr	r2, [pc, #440]	; (800145c <HAL_RCC_OscConfig+0x348>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	0019      	movs	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	021a      	lsls	r2, r3, #8
 80012ac:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012b2:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2209      	movs	r2, #9
 80012b8:	4393      	bics	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80012be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c4:	f000 fc42 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 80012c8:	0001      	movs	r1, r0
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	220f      	movs	r2, #15
 80012d2:	4013      	ands	r3, r2
 80012d4:	4a62      	ldr	r2, [pc, #392]	; (8001460 <HAL_RCC_OscConfig+0x34c>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	000a      	movs	r2, r1
 80012da:	40da      	lsrs	r2, r3
 80012dc:	4b61      	ldr	r3, [pc, #388]	; (8001464 <HAL_RCC_OscConfig+0x350>)
 80012de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x354>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2513      	movs	r5, #19
 80012e6:	197c      	adds	r4, r7, r5
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fc57 	bl	8000b9c <HAL_InitTick>
 80012ee:	0003      	movs	r3, r0
 80012f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012f2:	197b      	adds	r3, r7, r5
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d046      	beq.n	8001388 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80012fa:	197b      	adds	r3, r7, r5
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	e2d2      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	2b00      	cmp	r3, #0
 8001304:	d027      	beq.n	8001356 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2209      	movs	r2, #9
 800130c:	4393      	bics	r3, r2
 800130e:	0019      	movs	r1, r3
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc86 	bl	8000c28 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fc81 	bl	8000c28 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e2b8      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001334:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2204      	movs	r2, #4
 800133a:	4013      	ands	r3, r2
 800133c:	d0f1      	beq.n	8001322 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4a46      	ldr	r2, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x348>)
 8001344:	4013      	ands	r3, r2
 8001346:	0019      	movs	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	021a      	lsls	r2, r3, #8
 800134e:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	e018      	b.n	8001388 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800135c:	2101      	movs	r1, #1
 800135e:	438a      	bics	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fc61 	bl	8000c28 <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136c:	f7ff fc5c 	bl	8000c28 <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e293      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800137e:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2204      	movs	r2, #4
 8001384:	4013      	ands	r3, r2
 8001386:	d1f1      	bne.n	800136c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2210      	movs	r2, #16
 800138e:	4013      	ands	r3, r2
 8001390:	d100      	bne.n	8001394 <HAL_RCC_OscConfig+0x280>
 8001392:	e0a2      	b.n	80014da <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d140      	bne.n	800141c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4013      	ands	r3, r2
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x29e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e279      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a2d      	ldr	r2, [pc, #180]	; (800146c <HAL_RCC_OscConfig+0x358>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	0a19      	lsrs	r1, r3, #8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	061a      	lsls	r2, r3, #24
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	0b5b      	lsrs	r3, r3, #13
 80013e0:	3301      	adds	r3, #1
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	0212      	lsls	r2, r2, #8
 80013e6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	210f      	movs	r1, #15
 80013f0:	400b      	ands	r3, r1
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x34c>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_RCC_OscConfig+0x350>)
 80013fa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_RCC_OscConfig+0x354>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2513      	movs	r5, #19
 8001402:	197c      	adds	r4, r7, r5
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff fbc9 	bl	8000b9c <HAL_InitTick>
 800140a:	0003      	movs	r3, r0
 800140c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800140e:	197b      	adds	r3, r7, r5
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d061      	beq.n	80014da <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001416:	197b      	adds	r3, r7, r5
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	e244      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d040      	beq.n	80014a6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x33c>)
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	0049      	lsls	r1, r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fbf9 	bl	8000c28 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800143a:	e019      	b.n	8001470 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800143c:	f7ff fbf4 	bl	8000c28 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d912      	bls.n	8001470 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e22b      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000
 8001454:	fffeffff 	.word	0xfffeffff
 8001458:	fffbffff 	.word	0xfffbffff
 800145c:	ffffe0ff 	.word	0xffffe0ff
 8001460:	08002ae8 	.word	0x08002ae8
 8001464:	20000d08 	.word	0x20000d08
 8001468:	20000d0c 	.word	0x20000d0c
 800146c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001470:	4bca      	ldr	r3, [pc, #808]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d0df      	beq.n	800143c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147c:	4bc7      	ldr	r3, [pc, #796]	; (800179c <HAL_RCC_OscConfig+0x688>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4ac7      	ldr	r2, [pc, #796]	; (80017a0 <HAL_RCC_OscConfig+0x68c>)
 8001482:	4013      	ands	r3, r2
 8001484:	0019      	movs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800148a:	4bc4      	ldr	r3, [pc, #784]	; (800179c <HAL_RCC_OscConfig+0x688>)
 800148c:	430a      	orrs	r2, r1
 800148e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001490:	4bc2      	ldr	r3, [pc, #776]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	0a19      	lsrs	r1, r3, #8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	061a      	lsls	r2, r3, #24
 800149e:	4bbf      	ldr	r3, [pc, #764]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	e019      	b.n	80014da <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014a6:	4bbd      	ldr	r3, [pc, #756]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4bbc      	ldr	r3, [pc, #752]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80014ac:	49bd      	ldr	r1, [pc, #756]	; (80017a4 <HAL_RCC_OscConfig+0x690>)
 80014ae:	400a      	ands	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fbb9 	bl	8000c28 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014bc:	f7ff fbb4 	bl	8000c28 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1eb      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014ce:	4bb3      	ldr	r3, [pc, #716]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4013      	ands	r3, r2
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2208      	movs	r2, #8
 80014e0:	4013      	ands	r3, r2
 80014e2:	d036      	beq.n	8001552 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d019      	beq.n	8001520 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ec:	4bab      	ldr	r3, [pc, #684]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80014ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f0:	4baa      	ldr	r3, [pc, #680]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fb96 	bl	8000c28 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fb91 	bl	8000c28 <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1c8      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001514:	4ba1      	ldr	r3, [pc, #644]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d0f1      	beq.n	8001502 <HAL_RCC_OscConfig+0x3ee>
 800151e:	e018      	b.n	8001552 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001520:	4b9e      	ldr	r3, [pc, #632]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001524:	4b9d      	ldr	r3, [pc, #628]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001526:	2101      	movs	r1, #1
 8001528:	438a      	bics	r2, r1
 800152a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fb7c 	bl	8000c28 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff fb77 	bl	8000c28 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1ae      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001548:	4b94      	ldr	r3, [pc, #592]	; (800179c <HAL_RCC_OscConfig+0x688>)
 800154a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	d1f1      	bne.n	8001536 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2204      	movs	r2, #4
 8001558:	4013      	ands	r3, r2
 800155a:	d100      	bne.n	800155e <HAL_RCC_OscConfig+0x44a>
 800155c:	e0ae      	b.n	80016bc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2023      	movs	r0, #35	; 0x23
 8001560:	183b      	adds	r3, r7, r0
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b8d      	ldr	r3, [pc, #564]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	055b      	lsls	r3, r3, #21
 800156e:	4013      	ands	r3, r2
 8001570:	d109      	bne.n	8001586 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b8a      	ldr	r3, [pc, #552]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0549      	lsls	r1, r1, #21
 800157c:	430a      	orrs	r2, r1
 800157e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001580:	183b      	adds	r3, r7, r0
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x694>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4013      	ands	r3, r2
 8001590:	d11a      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x694>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b84      	ldr	r3, [pc, #528]	; (80017a8 <HAL_RCC_OscConfig+0x694>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0049      	lsls	r1, r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb42 	bl	8000c28 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015aa:	f7ff fb3d 	bl	8000c28 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b64      	cmp	r3, #100	; 0x64
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e174      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	4b7a      	ldr	r3, [pc, #488]	; (80017a8 <HAL_RCC_OscConfig+0x694>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4d0>
 80015d4:	4b71      	ldr	r3, [pc, #452]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80015d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015d8:	4b70      	ldr	r3, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	0049      	lsls	r1, r1, #1
 80015de:	430a      	orrs	r2, r1
 80015e0:	651a      	str	r2, [r3, #80]	; 0x50
 80015e2:	e031      	b.n	8001648 <HAL_RCC_OscConfig+0x534>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10c      	bne.n	8001606 <HAL_RCC_OscConfig+0x4f2>
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80015ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f0:	4b6a      	ldr	r3, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80015f2:	496c      	ldr	r1, [pc, #432]	; (80017a4 <HAL_RCC_OscConfig+0x690>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	651a      	str	r2, [r3, #80]	; 0x50
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80015fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015fc:	4b67      	ldr	r3, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80015fe:	496b      	ldr	r1, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x698>)
 8001600:	400a      	ands	r2, r1
 8001602:	651a      	str	r2, [r3, #80]	; 0x50
 8001604:	e020      	b.n	8001648 <HAL_RCC_OscConfig+0x534>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	23a0      	movs	r3, #160	; 0xa0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	429a      	cmp	r2, r3
 8001610:	d10e      	bne.n	8001630 <HAL_RCC_OscConfig+0x51c>
 8001612:	4b62      	ldr	r3, [pc, #392]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001616:	4b61      	ldr	r3, [pc, #388]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	00c9      	lsls	r1, r1, #3
 800161c:	430a      	orrs	r2, r1
 800161e:	651a      	str	r2, [r3, #80]	; 0x50
 8001620:	4b5e      	ldr	r3, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001624:	4b5d      	ldr	r3, [pc, #372]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0049      	lsls	r1, r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	651a      	str	r2, [r3, #80]	; 0x50
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0x534>
 8001630:	4b5a      	ldr	r3, [pc, #360]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001636:	495b      	ldr	r1, [pc, #364]	; (80017a4 <HAL_RCC_OscConfig+0x690>)
 8001638:	400a      	ands	r2, r1
 800163a:	651a      	str	r2, [r3, #80]	; 0x50
 800163c:	4b57      	ldr	r3, [pc, #348]	; (800179c <HAL_RCC_OscConfig+0x688>)
 800163e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001642:	495a      	ldr	r1, [pc, #360]	; (80017ac <HAL_RCC_OscConfig+0x698>)
 8001644:	400a      	ands	r2, r1
 8001646:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d015      	beq.n	800167c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff faea 	bl	8000c28 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001658:	e009      	b.n	800166e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fae5 	bl	8000c28 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_RCC_OscConfig+0x69c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e11b      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800166e:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d0ef      	beq.n	800165a <HAL_RCC_OscConfig+0x546>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff fad4 	bl	8000c28 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001684:	e009      	b.n	800169a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff facf 	bl	8000c28 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	4a47      	ldr	r2, [pc, #284]	; (80017b0 <HAL_RCC_OscConfig+0x69c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e105      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_RCC_OscConfig+0x688>)
 800169c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d1ef      	bne.n	8001686 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016a6:	2323      	movs	r3, #35	; 0x23
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d105      	bne.n	80016bc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b0:	4b3a      	ldr	r3, [pc, #232]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80016b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80016b6:	493f      	ldr	r1, [pc, #252]	; (80017b4 <HAL_RCC_OscConfig+0x6a0>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2220      	movs	r2, #32
 80016c2:	4013      	ands	r3, r2
 80016c4:	d049      	beq.n	800175a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d026      	beq.n	800171c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80016d4:	2101      	movs	r1, #1
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80016dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_RCC_OscConfig+0x688>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <HAL_RCC_OscConfig+0x6a4>)
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_RCC_OscConfig+0x6a4>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0189      	lsls	r1, r1, #6
 80016f0:	430a      	orrs	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa98 	bl	8000c28 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fe:	f7ff fa93 	bl	8000c28 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0ca      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2202      	movs	r2, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d0f1      	beq.n	80016fe <HAL_RCC_OscConfig+0x5ea>
 800171a:	e01e      	b.n	800175a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_RCC_OscConfig+0x688>)
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_RCC_OscConfig+0x6a4>)
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_RCC_OscConfig+0x6a4>)
 800172e:	4923      	ldr	r1, [pc, #140]	; (80017bc <HAL_RCC_OscConfig+0x6a8>)
 8001730:	400a      	ands	r2, r1
 8001732:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fa78 	bl	8000c28 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173e:	f7ff fa73 	bl	8000c28 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0aa      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2202      	movs	r2, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d1f1      	bne.n	800173e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <HAL_RCC_OscConfig+0x650>
 8001762:	e09f      	b.n	80018a4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d100      	bne.n	800176c <HAL_RCC_OscConfig+0x658>
 800176a:	e078      	b.n	800185e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	2b02      	cmp	r3, #2
 8001772:	d159      	bne.n	8001828 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_OscConfig+0x688>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_RCC_OscConfig+0x688>)
 800177a:	4911      	ldr	r1, [pc, #68]	; (80017c0 <HAL_RCC_OscConfig+0x6ac>)
 800177c:	400a      	ands	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fa52 	bl	8000c28 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fa4d 	bl	8000c28 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d915      	bls.n	80017c4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e084      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
 800179c:	40021000 	.word	0x40021000
 80017a0:	ffff1fff 	.word	0xffff1fff
 80017a4:	fffffeff 	.word	0xfffffeff
 80017a8:	40007000 	.word	0x40007000
 80017ac:	fffffbff 	.word	0xfffffbff
 80017b0:	00001388 	.word	0x00001388
 80017b4:	efffffff 	.word	0xefffffff
 80017b8:	40010000 	.word	0x40010000
 80017bc:	ffffdfff 	.word	0xffffdfff
 80017c0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	049b      	lsls	r3, r3, #18
 80017cc:	4013      	ands	r3, r2
 80017ce:	d1dc      	bne.n	800178a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d0:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_RCC_OscConfig+0x7a0>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	431a      	orrs	r2, r3
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f0:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0449      	lsls	r1, r1, #17
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fa13 	bl	8000c28 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fa0e 	bl	8000c28 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e045      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	049b      	lsls	r3, r3, #18
 8001822:	4013      	ands	r3, r2
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x6f4>
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 800182e:	4922      	ldr	r1, [pc, #136]	; (80018b8 <HAL_RCC_OscConfig+0x7a4>)
 8001830:	400a      	ands	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f9f8 	bl	8000c28 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff f9f3 	bl	8000c28 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e02a      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	049b      	lsls	r3, r3, #18
 8001858:	4013      	ands	r3, r2
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x72a>
 800185c:	e022      	b.n	80018a4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e01d      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_OscConfig+0x79c>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	025b      	lsls	r3, r3, #9
 8001876:	401a      	ands	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d10f      	bne.n	80018a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	23f0      	movs	r3, #240	; 0xf0
 8001884:	039b      	lsls	r3, r3, #14
 8001886:	401a      	ands	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	401a      	ands	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b00a      	add	sp, #40	; 0x28
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40021000 	.word	0x40021000
 80018b4:	ff02ffff 	.word	0xff02ffff
 80018b8:	feffffff 	.word	0xfeffffff

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e128      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d91e      	bls.n	800191c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b93      	ldr	r3, [pc, #588]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4393      	bics	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	4b90      	ldr	r3, [pc, #576]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f0:	f7ff f99a 	bl	8000c28 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f8:	e009      	b.n	800190e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fa:	f7ff f995 	bl	8000c28 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a8a      	ldr	r2, [pc, #552]	; (8001b30 <HAL_RCC_ClockConfig+0x274>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e109      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b87      	ldr	r3, [pc, #540]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	4013      	ands	r3, r2
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001926:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	22f0      	movs	r2, #240	; 0xf0
 800192c:	4393      	bics	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001936:	430a      	orrs	r2, r1
 8001938:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4013      	ands	r3, r2
 8001942:	d100      	bne.n	8001946 <HAL_RCC_ClockConfig+0x8a>
 8001944:	e089      	b.n	8001a5a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800194e:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	029b      	lsls	r3, r3, #10
 8001956:	4013      	ands	r3, r2
 8001958:	d120      	bne.n	800199c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0e1      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	049b      	lsls	r3, r3, #18
 800196e:	4013      	ands	r3, r2
 8001970:	d114      	bne.n	800199c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0d5      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d106      	bne.n	800198c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800197e:	4b6d      	ldr	r3, [pc, #436]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	d109      	bne.n	800199c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0ca      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800198c:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4013      	ands	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0c2      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199c:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2203      	movs	r2, #3
 80019a2:	4393      	bics	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 80019ac:	430a      	orrs	r2, r1
 80019ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f93a 	bl	8000c28 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d111      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c2:	f7ff f931 	bl	8000c28 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x274>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0a5      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d6:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	220c      	movs	r2, #12
 80019dc:	4013      	ands	r3, r2
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d1ef      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x106>
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d111      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ee:	f7ff f91b 	bl	8000c28 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	4a4d      	ldr	r2, [pc, #308]	; (8001b30 <HAL_RCC_ClockConfig+0x274>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e08f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a02:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	220c      	movs	r2, #12
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d1ef      	bne.n	80019ee <HAL_RCC_ClockConfig+0x132>
 8001a0e:	e024      	b.n	8001a5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d11b      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	f7ff f905 	bl	8000c28 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a42      	ldr	r2, [pc, #264]	; (8001b30 <HAL_RCC_ClockConfig+0x274>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e079      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	220c      	movs	r2, #12
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d1ef      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x15e>
 8001a3a:	e00e      	b.n	8001a5a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f8f4 	bl	8000c28 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4a3a      	ldr	r2, [pc, #232]	; (8001b30 <HAL_RCC_ClockConfig+0x274>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e068      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a50:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	220c      	movs	r2, #12
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d21e      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4393      	bics	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a7a:	f7ff f8d5 	bl	8000c28 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f8d0 	bl	8000c28 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <HAL_RCC_ClockConfig+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e044      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_ClockConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4013      	ands	r3, r2
 8001aae:	d009      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <HAL_RCC_ClockConfig+0x27c>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	4013      	ands	r3, r2
 8001acc:	d00a      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <HAL_RCC_ClockConfig+0x280>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00da      	lsls	r2, r3, #3
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae4:	f000 f832 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001ae8:	0001      	movs	r1, r0
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x278>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	220f      	movs	r2, #15
 8001af2:	4013      	ands	r3, r2
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_RCC_ClockConfig+0x284>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	000a      	movs	r2, r1
 8001afa:	40da      	lsrs	r2, r3
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_RCC_ClockConfig+0x288>)
 8001afe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_ClockConfig+0x28c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	250b      	movs	r5, #11
 8001b06:	197c      	adds	r4, r7, r5
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff f847 	bl	8000b9c <HAL_InitTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b12:	197b      	adds	r3, r7, r5
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b1a:	197b      	adds	r3, r7, r5
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b004      	add	sp, #16
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	00001388 	.word	0x00001388
 8001b34:	40021000 	.word	0x40021000
 8001b38:	fffff8ff 	.word	0xfffff8ff
 8001b3c:	ffffc7ff 	.word	0xffffc7ff
 8001b40:	08002ae8 	.word	0x08002ae8
 8001b44:	20000d08 	.word	0x20000d08
 8001b48:	20000d0c 	.word	0x20000d0c

08001b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b08e      	sub	sp, #56	; 0x38
 8001b50:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d014      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x40>
 8001b62:	d900      	bls.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1a>
 8001b64:	e07b      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x112>
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x24>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d00b      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b6e:	e076      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2210      	movs	r2, #16
 8001b76:	4013      	ands	r3, r2
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b7a:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b7e:	e07c      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b84:	e079      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b86:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b8a:	e076      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	230f      	movs	r3, #15
 8001b92:	401a      	ands	r2, r3
 8001b94:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b96:	5c9b      	ldrb	r3, [r3, r2]
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9c:	0d9a      	lsrs	r2, r3, #22
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba6:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	025b      	lsls	r3, r3, #9
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d01a      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	4a35      	ldr	r2, [pc, #212]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	69b8      	ldr	r0, [r7, #24]
 8001bc0:	69f9      	ldr	r1, [r7, #28]
 8001bc2:	f7fe fb4d 	bl	8000260 <__aeabi_lmul>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	000b      	movs	r3, r1
 8001bca:	0010      	movs	r0, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f7fe fb21 	bl	8000220 <__aeabi_uldivmod>
 8001bde:	0002      	movs	r2, r0
 8001be0:	000b      	movs	r3, r1
 8001be2:	0013      	movs	r3, r2
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
 8001be6:	e037      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2210      	movs	r2, #16
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d01a      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	68b8      	ldr	r0, [r7, #8]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	f7fe fb2d 	bl	8000260 <__aeabi_lmul>
 8001c06:	0002      	movs	r2, r0
 8001c08:	000b      	movs	r3, r1
 8001c0a:	0010      	movs	r0, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f7fe fb01 	bl	8000220 <__aeabi_uldivmod>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	000b      	movs	r3, r1
 8001c22:	0013      	movs	r3, r2
 8001c24:	637b      	str	r3, [r7, #52]	; 0x34
 8001c26:	e017      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	0019      	movs	r1, r3
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x140>)
 8001c32:	2300      	movs	r3, #0
 8001c34:	f7fe fb14 	bl	8000260 <__aeabi_lmul>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	000b      	movs	r3, r1
 8001c3c:	0010      	movs	r0, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	001c      	movs	r4, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	001d      	movs	r5, r3
 8001c48:	0022      	movs	r2, r4
 8001c4a:	002b      	movs	r3, r5
 8001c4c:	f7fe fae8 	bl	8000220 <__aeabi_uldivmod>
 8001c50:	0002      	movs	r2, r0
 8001c52:	000b      	movs	r3, r1
 8001c54:	0013      	movs	r3, r2
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5c:	e00d      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0b5b      	lsrs	r3, r3, #13
 8001c64:	2207      	movs	r2, #7
 8001c66:	4013      	ands	r3, r2
 8001c68:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0212      	lsls	r2, r2, #8
 8001c72:	409a      	lsls	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c78:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b00e      	add	sp, #56	; 0x38
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	003d0900 	.word	0x003d0900
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	08002b00 	.word	0x08002b00

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	20000d08 	.word	0x20000d08

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff2 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb4:	0001      	movs	r1, r0
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	40d9      	lsrs	r1, r3
 8001cc6:	000b      	movs	r3, r1
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08002af8 	.word	0x08002af8

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffdc 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	0adb      	lsrs	r3, r3, #11
 8001ce8:	2207      	movs	r2, #7
 8001cea:	4013      	ands	r3, r2
 8001cec:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	40d9      	lsrs	r1, r3
 8001cf2:	000b      	movs	r3, r1
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08002af8 	.word	0x08002af8

08001d04 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d0c:	2317      	movs	r3, #23
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4013      	ands	r3, r2
 8001d28:	d100      	bne.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d2a:	e104      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2c:	4bb9      	ldr	r3, [pc, #740]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	055b      	lsls	r3, r3, #21
 8001d34:	4013      	ands	r3, r2
 8001d36:	d10a      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	4bb6      	ldr	r3, [pc, #728]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d3c:	4bb5      	ldr	r3, [pc, #724]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	0549      	lsls	r1, r1, #21
 8001d42:	430a      	orrs	r2, r1
 8001d44:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d46:	2317      	movs	r3, #23
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4bb2      	ldr	r3, [pc, #712]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	d11a      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4baf      	ldr	r3, [pc, #700]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4bae      	ldr	r3, [pc, #696]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0049      	lsls	r1, r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d68:	f7fe ff5e 	bl	8000c28 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7fe ff59 	bl	8000c28 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e143      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4ba4      	ldr	r3, [pc, #656]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d90:	4ba0      	ldr	r3, [pc, #640]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	23c0      	movs	r3, #192	; 0xc0
 8001d96:	039b      	lsls	r3, r3, #14
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	039b      	lsls	r3, r3, #14
 8001da4:	4013      	ands	r3, r2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	23c0      	movs	r3, #192	; 0xc0
 8001db2:	039b      	lsls	r3, r3, #14
 8001db4:	4013      	ands	r3, r2
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d013      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d10a      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dce:	4b91      	ldr	r3, [pc, #580]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	029b      	lsls	r3, r3, #10
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d101      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e113      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001de4:	4b8b      	ldr	r3, [pc, #556]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de8:	23c0      	movs	r3, #192	; 0xc0
 8001dea:	029b      	lsls	r3, r3, #10
 8001dec:	4013      	ands	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d049      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	23c0      	movs	r3, #192	; 0xc0
 8001dfc:	029b      	lsls	r3, r3, #10
 8001dfe:	4013      	ands	r3, r2
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d004      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	23c0      	movs	r3, #192	; 0xc0
 8001e16:	029b      	lsls	r3, r3, #10
 8001e18:	4013      	ands	r3, r2
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d034      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d02e      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e2c:	4b79      	ldr	r3, [pc, #484]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e30:	4a7a      	ldr	r2, [pc, #488]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e36:	4b77      	ldr	r3, [pc, #476]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e3a:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0309      	lsls	r1, r1, #12
 8001e40:	430a      	orrs	r2, r1
 8001e42:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e44:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e48:	4b72      	ldr	r3, [pc, #456]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e4a:	4975      	ldr	r1, [pc, #468]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e50:	4b70      	ldr	r3, [pc, #448]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d014      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fee2 	bl	8000c28 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e68:	e009      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe fedd 	bl	8000c28 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4a6b      	ldr	r2, [pc, #428]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0c6      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e7e:	4b65      	ldr	r3, [pc, #404]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d0ef      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	d01f      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	23c0      	movs	r3, #192	; 0xc0
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	23c0      	movs	r3, #192	; 0xc0
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001ea8:	4b5a      	ldr	r3, [pc, #360]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a5e      	ldr	r2, [pc, #376]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	039b      	lsls	r3, r3, #14
 8001eba:	401a      	ands	r2, r3
 8001ebc:	4b55      	ldr	r3, [pc, #340]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ec4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	23c0      	movs	r3, #192	; 0xc0
 8001ecc:	029b      	lsls	r3, r3, #10
 8001ece:	401a      	ands	r2, r3
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2220      	movs	r2, #32
 8001edc:	4013      	ands	r3, r2
 8001ede:	d01f      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	23c0      	movs	r3, #192	; 0xc0
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	401a      	ands	r2, r3
 8001eea:	23c0      	movs	r3, #192	; 0xc0
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	039b      	lsls	r3, r3, #14
 8001f04:	401a      	ands	r2, r3
 8001f06:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f0e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	23c0      	movs	r3, #192	; 0xc0
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	401a      	ands	r2, r3
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f20:	2317      	movs	r3, #23
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f30:	493e      	ldr	r1, [pc, #248]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8001f32:	400a      	ands	r2, r1
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f40:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	2203      	movs	r2, #3
 8001f46:	4393      	bics	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	220c      	movs	r2, #12
 8001f64:	4393      	bics	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	4013      	ands	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a25      	ldr	r2, [pc, #148]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2240      	movs	r2, #64	; 0x40
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1a      	ldr	r2, [r3, #32]
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002006:	430a      	orrs	r2, r1
 8002008:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b006      	add	sp, #24
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	fffcffff 	.word	0xfffcffff
 8002020:	fff7ffff 	.word	0xfff7ffff
 8002024:	00001388 	.word	0x00001388
 8002028:	ffcfffff 	.word	0xffcfffff
 800202c:	efffffff 	.word	0xefffffff
 8002030:	fffff3ff 	.word	0xfffff3ff
 8002034:	ffffcfff 	.word	0xffffcfff
 8002038:	fbffffff 	.word	0xfbffffff
 800203c:	fff3ffff 	.word	0xfff3ffff

08002040 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e044      	b.n	80020dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2278      	movs	r2, #120	; 0x78
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f7fe fcef 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	; 0x24
 800206e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f830 	bl	80020e8 <UART_SetConfig>
 8002088:	0003      	movs	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e024      	b.n	80020dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f000 fac1 	bl	8002624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	490d      	ldr	r1, [pc, #52]	; (80020e4 <HAL_UART_Init+0xa4>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	212a      	movs	r1, #42	; 0x2a
 80020be:	438a      	bics	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2101      	movs	r1, #1
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fb59 	bl	800278c <UART_CheckIdleState>
 80020da:	0003      	movs	r3, r0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	ffffb7ff 	.word	0xffffb7ff

080020e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b08e      	sub	sp, #56	; 0x38
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020f0:	231a      	movs	r3, #26
 80020f2:	2218      	movs	r2, #24
 80020f4:	189b      	adds	r3, r3, r2
 80020f6:	19db      	adds	r3, r3, r7
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	431a      	orrs	r2, r3
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4313      	orrs	r3, r2
 8002112:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4ac3      	ldr	r2, [pc, #780]	; (8002428 <UART_SetConfig+0x340>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4abe      	ldr	r2, [pc, #760]	; (800242c <UART_SetConfig+0x344>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4ab8      	ldr	r2, [pc, #736]	; (8002430 <UART_SetConfig+0x348>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d004      	beq.n	800215c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002158:	4313      	orrs	r3, r2
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4ab4      	ldr	r2, [pc, #720]	; (8002434 <UART_SetConfig+0x34c>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4ab0      	ldr	r2, [pc, #704]	; (8002438 <UART_SetConfig+0x350>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d131      	bne.n	80021e0 <UART_SetConfig+0xf8>
 800217c:	4baf      	ldr	r3, [pc, #700]	; (800243c <UART_SetConfig+0x354>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	2203      	movs	r2, #3
 8002182:	4013      	ands	r3, r2
 8002184:	2b03      	cmp	r3, #3
 8002186:	d01d      	beq.n	80021c4 <UART_SetConfig+0xdc>
 8002188:	d823      	bhi.n	80021d2 <UART_SetConfig+0xea>
 800218a:	2b02      	cmp	r3, #2
 800218c:	d00c      	beq.n	80021a8 <UART_SetConfig+0xc0>
 800218e:	d820      	bhi.n	80021d2 <UART_SetConfig+0xea>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <UART_SetConfig+0xb2>
 8002194:	2b01      	cmp	r3, #1
 8002196:	d00e      	beq.n	80021b6 <UART_SetConfig+0xce>
 8002198:	e01b      	b.n	80021d2 <UART_SetConfig+0xea>
 800219a:	231b      	movs	r3, #27
 800219c:	2218      	movs	r2, #24
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	19db      	adds	r3, r3, r7
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	e0b4      	b.n	8002312 <UART_SetConfig+0x22a>
 80021a8:	231b      	movs	r3, #27
 80021aa:	2218      	movs	r2, #24
 80021ac:	189b      	adds	r3, r3, r2
 80021ae:	19db      	adds	r3, r3, r7
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
 80021b4:	e0ad      	b.n	8002312 <UART_SetConfig+0x22a>
 80021b6:	231b      	movs	r3, #27
 80021b8:	2218      	movs	r2, #24
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	19db      	adds	r3, r3, r7
 80021be:	2204      	movs	r2, #4
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e0a6      	b.n	8002312 <UART_SetConfig+0x22a>
 80021c4:	231b      	movs	r3, #27
 80021c6:	2218      	movs	r2, #24
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	19db      	adds	r3, r3, r7
 80021cc:	2208      	movs	r2, #8
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e09f      	b.n	8002312 <UART_SetConfig+0x22a>
 80021d2:	231b      	movs	r3, #27
 80021d4:	2218      	movs	r2, #24
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	19db      	adds	r3, r3, r7
 80021da:	2210      	movs	r2, #16
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e098      	b.n	8002312 <UART_SetConfig+0x22a>
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a96      	ldr	r2, [pc, #600]	; (8002440 <UART_SetConfig+0x358>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d131      	bne.n	800224e <UART_SetConfig+0x166>
 80021ea:	4b94      	ldr	r3, [pc, #592]	; (800243c <UART_SetConfig+0x354>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	220c      	movs	r2, #12
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d01d      	beq.n	8002232 <UART_SetConfig+0x14a>
 80021f6:	d823      	bhi.n	8002240 <UART_SetConfig+0x158>
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d00c      	beq.n	8002216 <UART_SetConfig+0x12e>
 80021fc:	d820      	bhi.n	8002240 <UART_SetConfig+0x158>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <UART_SetConfig+0x120>
 8002202:	2b04      	cmp	r3, #4
 8002204:	d00e      	beq.n	8002224 <UART_SetConfig+0x13c>
 8002206:	e01b      	b.n	8002240 <UART_SetConfig+0x158>
 8002208:	231b      	movs	r3, #27
 800220a:	2218      	movs	r2, #24
 800220c:	189b      	adds	r3, r3, r2
 800220e:	19db      	adds	r3, r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e07d      	b.n	8002312 <UART_SetConfig+0x22a>
 8002216:	231b      	movs	r3, #27
 8002218:	2218      	movs	r2, #24
 800221a:	189b      	adds	r3, r3, r2
 800221c:	19db      	adds	r3, r3, r7
 800221e:	2202      	movs	r2, #2
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e076      	b.n	8002312 <UART_SetConfig+0x22a>
 8002224:	231b      	movs	r3, #27
 8002226:	2218      	movs	r2, #24
 8002228:	189b      	adds	r3, r3, r2
 800222a:	19db      	adds	r3, r3, r7
 800222c:	2204      	movs	r2, #4
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e06f      	b.n	8002312 <UART_SetConfig+0x22a>
 8002232:	231b      	movs	r3, #27
 8002234:	2218      	movs	r2, #24
 8002236:	189b      	adds	r3, r3, r2
 8002238:	19db      	adds	r3, r3, r7
 800223a:	2208      	movs	r2, #8
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e068      	b.n	8002312 <UART_SetConfig+0x22a>
 8002240:	231b      	movs	r3, #27
 8002242:	2218      	movs	r2, #24
 8002244:	189b      	adds	r3, r3, r2
 8002246:	19db      	adds	r3, r3, r7
 8002248:	2210      	movs	r2, #16
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e061      	b.n	8002312 <UART_SetConfig+0x22a>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <UART_SetConfig+0x35c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d106      	bne.n	8002266 <UART_SetConfig+0x17e>
 8002258:	231b      	movs	r3, #27
 800225a:	2218      	movs	r2, #24
 800225c:	189b      	adds	r3, r3, r2
 800225e:	19db      	adds	r3, r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e055      	b.n	8002312 <UART_SetConfig+0x22a>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a77      	ldr	r2, [pc, #476]	; (8002448 <UART_SetConfig+0x360>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d106      	bne.n	800227e <UART_SetConfig+0x196>
 8002270:	231b      	movs	r3, #27
 8002272:	2218      	movs	r2, #24
 8002274:	189b      	adds	r3, r3, r2
 8002276:	19db      	adds	r3, r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e049      	b.n	8002312 <UART_SetConfig+0x22a>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6b      	ldr	r2, [pc, #428]	; (8002430 <UART_SetConfig+0x348>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d13e      	bne.n	8002306 <UART_SetConfig+0x21e>
 8002288:	4b6c      	ldr	r3, [pc, #432]	; (800243c <UART_SetConfig+0x354>)
 800228a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800228c:	23c0      	movs	r3, #192	; 0xc0
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4013      	ands	r3, r2
 8002292:	22c0      	movs	r2, #192	; 0xc0
 8002294:	0112      	lsls	r2, r2, #4
 8002296:	4293      	cmp	r3, r2
 8002298:	d027      	beq.n	80022ea <UART_SetConfig+0x202>
 800229a:	22c0      	movs	r2, #192	; 0xc0
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	4293      	cmp	r3, r2
 80022a0:	d82a      	bhi.n	80022f8 <UART_SetConfig+0x210>
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d011      	beq.n	80022ce <UART_SetConfig+0x1e6>
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d822      	bhi.n	80022f8 <UART_SetConfig+0x210>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <UART_SetConfig+0x1d8>
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	00d2      	lsls	r2, r2, #3
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00e      	beq.n	80022dc <UART_SetConfig+0x1f4>
 80022be:	e01b      	b.n	80022f8 <UART_SetConfig+0x210>
 80022c0:	231b      	movs	r3, #27
 80022c2:	2218      	movs	r2, #24
 80022c4:	189b      	adds	r3, r3, r2
 80022c6:	19db      	adds	r3, r3, r7
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e021      	b.n	8002312 <UART_SetConfig+0x22a>
 80022ce:	231b      	movs	r3, #27
 80022d0:	2218      	movs	r2, #24
 80022d2:	189b      	adds	r3, r3, r2
 80022d4:	19db      	adds	r3, r3, r7
 80022d6:	2202      	movs	r2, #2
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	e01a      	b.n	8002312 <UART_SetConfig+0x22a>
 80022dc:	231b      	movs	r3, #27
 80022de:	2218      	movs	r2, #24
 80022e0:	189b      	adds	r3, r3, r2
 80022e2:	19db      	adds	r3, r3, r7
 80022e4:	2204      	movs	r2, #4
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e013      	b.n	8002312 <UART_SetConfig+0x22a>
 80022ea:	231b      	movs	r3, #27
 80022ec:	2218      	movs	r2, #24
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	19db      	adds	r3, r3, r7
 80022f2:	2208      	movs	r2, #8
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e00c      	b.n	8002312 <UART_SetConfig+0x22a>
 80022f8:	231b      	movs	r3, #27
 80022fa:	2218      	movs	r2, #24
 80022fc:	189b      	adds	r3, r3, r2
 80022fe:	19db      	adds	r3, r3, r7
 8002300:	2210      	movs	r2, #16
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e005      	b.n	8002312 <UART_SetConfig+0x22a>
 8002306:	231b      	movs	r3, #27
 8002308:	2218      	movs	r2, #24
 800230a:	189b      	adds	r3, r3, r2
 800230c:	19db      	adds	r3, r3, r7
 800230e:	2210      	movs	r2, #16
 8002310:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a46      	ldr	r2, [pc, #280]	; (8002430 <UART_SetConfig+0x348>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d000      	beq.n	800231e <UART_SetConfig+0x236>
 800231c:	e09a      	b.n	8002454 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800231e:	231b      	movs	r3, #27
 8002320:	2218      	movs	r2, #24
 8002322:	189b      	adds	r3, r3, r2
 8002324:	19db      	adds	r3, r3, r7
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d01d      	beq.n	8002368 <UART_SetConfig+0x280>
 800232c:	dc20      	bgt.n	8002370 <UART_SetConfig+0x288>
 800232e:	2b04      	cmp	r3, #4
 8002330:	d015      	beq.n	800235e <UART_SetConfig+0x276>
 8002332:	dc1d      	bgt.n	8002370 <UART_SetConfig+0x288>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <UART_SetConfig+0x256>
 8002338:	2b02      	cmp	r3, #2
 800233a:	d005      	beq.n	8002348 <UART_SetConfig+0x260>
 800233c:	e018      	b.n	8002370 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800233e:	f7ff fcb5 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002342:	0003      	movs	r3, r0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002346:	e01c      	b.n	8002382 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002348:	4b3c      	ldr	r3, [pc, #240]	; (800243c <UART_SetConfig+0x354>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	4013      	ands	r3, r2
 8002350:	d002      	beq.n	8002358 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <UART_SetConfig+0x364>)
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002356:	e014      	b.n	8002382 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002358:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <UART_SetConfig+0x368>)
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800235c:	e011      	b.n	8002382 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800235e:	f7ff fbf5 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8002362:	0003      	movs	r3, r0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002366:	e00c      	b.n	8002382 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800236e:	e008      	b.n	8002382 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002374:	231a      	movs	r3, #26
 8002376:	2218      	movs	r2, #24
 8002378:	189b      	adds	r3, r3, r2
 800237a:	19db      	adds	r3, r3, r7
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
        break;
 8002380:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d100      	bne.n	800238a <UART_SetConfig+0x2a2>
 8002388:	e133      	b.n	80025f2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	0013      	movs	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	189b      	adds	r3, r3, r2
 8002394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002396:	429a      	cmp	r2, r3
 8002398:	d305      	bcc.n	80023a6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80023a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d906      	bls.n	80023b4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80023a6:	231a      	movs	r3, #26
 80023a8:	2218      	movs	r2, #24
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	19db      	adds	r3, r3, r7
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e11e      	b.n	80025f2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	000b      	movs	r3, r1
 80023c2:	0e1b      	lsrs	r3, r3, #24
 80023c4:	0010      	movs	r0, r2
 80023c6:	0205      	lsls	r5, r0, #8
 80023c8:	431d      	orrs	r5, r3
 80023ca:	000b      	movs	r3, r1
 80023cc:	021c      	lsls	r4, r3, #8
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68b8      	ldr	r0, [r7, #8]
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	1900      	adds	r0, r0, r4
 80023e0:	4169      	adcs	r1, r5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f7fd ff16 	bl	8000220 <__aeabi_uldivmod>
 80023f4:	0002      	movs	r2, r0
 80023f6:	000b      	movs	r3, r1
 80023f8:	0013      	movs	r3, r2
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fe:	23c0      	movs	r3, #192	; 0xc0
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	429a      	cmp	r2, r3
 8002404:	d309      	bcc.n	800241a <UART_SetConfig+0x332>
 8002406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	035b      	lsls	r3, r3, #13
 800240c:	429a      	cmp	r2, r3
 800240e:	d204      	bcs.n	800241a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	e0eb      	b.n	80025f2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800241a:	231a      	movs	r3, #26
 800241c:	2218      	movs	r2, #24
 800241e:	189b      	adds	r3, r3, r2
 8002420:	19db      	adds	r3, r3, r7
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e0e4      	b.n	80025f2 <UART_SetConfig+0x50a>
 8002428:	efff69f3 	.word	0xefff69f3
 800242c:	ffffcfff 	.word	0xffffcfff
 8002430:	40004800 	.word	0x40004800
 8002434:	fffff4ff 	.word	0xfffff4ff
 8002438:	40013800 	.word	0x40013800
 800243c:	40021000 	.word	0x40021000
 8002440:	40004400 	.word	0x40004400
 8002444:	40004c00 	.word	0x40004c00
 8002448:	40005000 	.word	0x40005000
 800244c:	003d0900 	.word	0x003d0900
 8002450:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	429a      	cmp	r2, r3
 800245e:	d000      	beq.n	8002462 <UART_SetConfig+0x37a>
 8002460:	e070      	b.n	8002544 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8002462:	231b      	movs	r3, #27
 8002464:	2218      	movs	r2, #24
 8002466:	189b      	adds	r3, r3, r2
 8002468:	19db      	adds	r3, r3, r7
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d822      	bhi.n	80024b6 <UART_SetConfig+0x3ce>
 8002470:	009a      	lsls	r2, r3, #2
 8002472:	4b67      	ldr	r3, [pc, #412]	; (8002610 <UART_SetConfig+0x528>)
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800247a:	f7ff fc17 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 800247e:	0003      	movs	r3, r0
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002482:	e021      	b.n	80024c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002484:	f7ff fc28 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8002488:	0003      	movs	r3, r0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800248c:	e01c      	b.n	80024c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800248e:	4b61      	ldr	r3, [pc, #388]	; (8002614 <UART_SetConfig+0x52c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2210      	movs	r2, #16
 8002494:	4013      	ands	r3, r2
 8002496:	d002      	beq.n	800249e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002498:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <UART_SetConfig+0x530>)
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800249c:	e014      	b.n	80024c8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <UART_SetConfig+0x534>)
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024a2:	e011      	b.n	80024c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024a4:	f7ff fb52 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 80024a8:	0003      	movs	r3, r0
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024ac:	e00c      	b.n	80024c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80024b4:	e008      	b.n	80024c8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80024ba:	231a      	movs	r3, #26
 80024bc:	2218      	movs	r2, #24
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	19db      	adds	r3, r3, r7
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
        break;
 80024c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d100      	bne.n	80024d0 <UART_SetConfig+0x3e8>
 80024ce:	e090      	b.n	80025f2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	005a      	lsls	r2, r3, #1
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	18d2      	adds	r2, r2, r3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0019      	movs	r1, r3
 80024e2:	0010      	movs	r0, r2
 80024e4:	f7fd fe10 	bl	8000108 <__udivsi3>
 80024e8:	0003      	movs	r3, r0
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	d921      	bls.n	8002536 <UART_SetConfig+0x44e>
 80024f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d21c      	bcs.n	8002536 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	b29a      	uxth	r2, r3
 8002500:	200e      	movs	r0, #14
 8002502:	2418      	movs	r4, #24
 8002504:	1903      	adds	r3, r0, r4
 8002506:	19db      	adds	r3, r3, r7
 8002508:	210f      	movs	r1, #15
 800250a:	438a      	bics	r2, r1
 800250c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	b29b      	uxth	r3, r3
 8002514:	2207      	movs	r2, #7
 8002516:	4013      	ands	r3, r2
 8002518:	b299      	uxth	r1, r3
 800251a:	1903      	adds	r3, r0, r4
 800251c:	19db      	adds	r3, r3, r7
 800251e:	1902      	adds	r2, r0, r4
 8002520:	19d2      	adds	r2, r2, r7
 8002522:	8812      	ldrh	r2, [r2, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1902      	adds	r2, r0, r4
 800252e:	19d2      	adds	r2, r2, r7
 8002530:	8812      	ldrh	r2, [r2, #0]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	e05d      	b.n	80025f2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002536:	231a      	movs	r3, #26
 8002538:	2218      	movs	r2, #24
 800253a:	189b      	adds	r3, r3, r2
 800253c:	19db      	adds	r3, r3, r7
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e056      	b.n	80025f2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002544:	231b      	movs	r3, #27
 8002546:	2218      	movs	r2, #24
 8002548:	189b      	adds	r3, r3, r2
 800254a:	19db      	adds	r3, r3, r7
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b08      	cmp	r3, #8
 8002550:	d822      	bhi.n	8002598 <UART_SetConfig+0x4b0>
 8002552:	009a      	lsls	r2, r3, #2
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <UART_SetConfig+0x538>)
 8002556:	18d3      	adds	r3, r2, r3
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800255c:	f7ff fba6 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002560:	0003      	movs	r3, r0
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002564:	e021      	b.n	80025aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002566:	f7ff fbb7 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 800256a:	0003      	movs	r3, r0
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800256e:	e01c      	b.n	80025aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <UART_SetConfig+0x52c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2210      	movs	r2, #16
 8002576:	4013      	ands	r3, r2
 8002578:	d002      	beq.n	8002580 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <UART_SetConfig+0x530>)
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800257e:	e014      	b.n	80025aa <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <UART_SetConfig+0x534>)
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002584:	e011      	b.n	80025aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002586:	f7ff fae1 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 800258a:	0003      	movs	r3, r0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800258e:	e00c      	b.n	80025aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002596:	e008      	b.n	80025aa <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800259c:	231a      	movs	r3, #26
 800259e:	2218      	movs	r2, #24
 80025a0:	189b      	adds	r3, r3, r2
 80025a2:	19db      	adds	r3, r3, r7
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
        break;
 80025a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	085a      	lsrs	r2, r3, #1
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	18d2      	adds	r2, r2, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0019      	movs	r1, r3
 80025c0:	0010      	movs	r0, r2
 80025c2:	f7fd fda1 	bl	8000108 <__udivsi3>
 80025c6:	0003      	movs	r3, r0
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d90a      	bls.n	80025e6 <UART_SetConfig+0x4fe>
 80025d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d205      	bcs.n	80025e6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	b29a      	uxth	r2, r3
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60da      	str	r2, [r3, #12]
 80025e4:	e005      	b.n	80025f2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80025e6:	231a      	movs	r3, #26
 80025e8:	2218      	movs	r2, #24
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	19db      	adds	r3, r3, r7
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2200      	movs	r2, #0
 80025f6:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2200      	movs	r2, #0
 80025fc:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80025fe:	231a      	movs	r3, #26
 8002600:	2218      	movs	r2, #24
 8002602:	189b      	adds	r3, r3, r2
 8002604:	19db      	adds	r3, r3, r7
 8002606:	781b      	ldrb	r3, [r3, #0]
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b00e      	add	sp, #56	; 0x38
 800260e:	bdb0      	pop	{r4, r5, r7, pc}
 8002610:	08002b0c 	.word	0x08002b0c
 8002614:	40021000 	.word	0x40021000
 8002618:	003d0900 	.word	0x003d0900
 800261c:	00f42400 	.word	0x00f42400
 8002620:	08002b30 	.word	0x08002b30

08002624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	d00b      	beq.n	800264e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <UART_AdvFeatureConfig+0x144>)
 800263e:	4013      	ands	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	d00b      	beq.n	8002670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a43      	ldr	r2, [pc, #268]	; (800276c <UART_AdvFeatureConfig+0x148>)
 8002660:	4013      	ands	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2204      	movs	r2, #4
 8002676:	4013      	ands	r3, r2
 8002678:	d00b      	beq.n	8002692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <UART_AdvFeatureConfig+0x14c>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2208      	movs	r2, #8
 8002698:	4013      	ands	r3, r2
 800269a:	d00b      	beq.n	80026b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <UART_AdvFeatureConfig+0x150>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2210      	movs	r2, #16
 80026ba:	4013      	ands	r3, r2
 80026bc:	d00b      	beq.n	80026d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	; (8002778 <UART_AdvFeatureConfig+0x154>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	2220      	movs	r2, #32
 80026dc:	4013      	ands	r3, r2
 80026de:	d00b      	beq.n	80026f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4a25      	ldr	r2, [pc, #148]	; (800277c <UART_AdvFeatureConfig+0x158>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	0019      	movs	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2240      	movs	r2, #64	; 0x40
 80026fe:	4013      	ands	r3, r2
 8002700:	d01d      	beq.n	800273e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <UART_AdvFeatureConfig+0x15c>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	035b      	lsls	r3, r3, #13
 8002722:	429a      	cmp	r2, r3
 8002724:	d10b      	bne.n	800273e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <UART_AdvFeatureConfig+0x160>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	4013      	ands	r3, r2
 8002746:	d00b      	beq.n	8002760 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <UART_AdvFeatureConfig+0x164>)
 8002750:	4013      	ands	r3, r2
 8002752:	0019      	movs	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  }
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b002      	add	sp, #8
 8002766:	bd80      	pop	{r7, pc}
 8002768:	fffdffff 	.word	0xfffdffff
 800276c:	fffeffff 	.word	0xfffeffff
 8002770:	fffbffff 	.word	0xfffbffff
 8002774:	ffff7fff 	.word	0xffff7fff
 8002778:	ffffefff 	.word	0xffffefff
 800277c:	ffffdfff 	.word	0xffffdfff
 8002780:	ffefffff 	.word	0xffefffff
 8002784:	ff9fffff 	.word	0xff9fffff
 8002788:	fff7ffff 	.word	0xfff7ffff

0800278c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b092      	sub	sp, #72	; 0x48
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2284      	movs	r2, #132	; 0x84
 8002798:	2100      	movs	r1, #0
 800279a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800279c:	f7fe fa44 	bl	8000c28 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2208      	movs	r2, #8
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d12c      	bne.n	800280c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	0391      	lsls	r1, r2, #14
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <UART_CheckIdleState+0x148>)
 80027bc:	9200      	str	r2, [sp, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	f000 f88c 	bl	80028dc <UART_WaitOnFlagUntilTimeout>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d021      	beq.n	800280c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c8:	f3ef 8310 	mrs	r3, PRIMASK
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d2:	2301      	movs	r3, #1
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	f383 8810 	msr	PRIMASK, r3
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	438a      	bics	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2278      	movs	r2, #120	; 0x78
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e05f      	b.n	80028cc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2204      	movs	r2, #4
 8002814:	4013      	ands	r3, r2
 8002816:	2b04      	cmp	r3, #4
 8002818:	d146      	bne.n	80028a8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	03d1      	lsls	r1, r2, #15
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <UART_CheckIdleState+0x148>)
 8002824:	9200      	str	r2, [sp, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	f000 f858 	bl	80028dc <UART_WaitOnFlagUntilTimeout>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d03b      	beq.n	80028a8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002830:	f3ef 8310 	mrs	r3, PRIMASK
 8002834:	60fb      	str	r3, [r7, #12]
  return(result);
 8002836:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002838:	637b      	str	r3, [r7, #52]	; 0x34
 800283a:	2301      	movs	r3, #1
 800283c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f383 8810 	msr	PRIMASK, r3
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4921      	ldr	r1, [pc, #132]	; (80028d8 <UART_CheckIdleState+0x14c>)
 8002852:	400a      	ands	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f383 8810 	msr	PRIMASK, r3
}
 8002860:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002862:	f3ef 8310 	mrs	r3, PRIMASK
 8002866:	61bb      	str	r3, [r7, #24]
  return(result);
 8002868:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
 800286c:	2301      	movs	r3, #1
 800286e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f383 8810 	msr	PRIMASK, r3
}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	438a      	bics	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	f383 8810 	msr	PRIMASK, r3
}
 8002892:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	2120      	movs	r1, #32
 800289a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2278      	movs	r2, #120	; 0x78
 80028a0:	2100      	movs	r1, #0
 80028a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e011      	b.n	80028cc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2220      	movs	r2, #32
 80028ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	2120      	movs	r1, #32
 80028b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2278      	movs	r2, #120	; 0x78
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b010      	add	sp, #64	; 0x40
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	01ffffff 	.word	0x01ffffff
 80028d8:	fffffedf 	.word	0xfffffedf

080028dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	1dfb      	adds	r3, r7, #7
 80028ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ec:	e04b      	b.n	8002986 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	3301      	adds	r3, #1
 80028f2:	d048      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe f998 	bl	8000c28 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e04b      	b.n	80029a6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2204      	movs	r2, #4
 8002916:	4013      	ands	r3, r2
 8002918:	d035      	beq.n	8002986 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2208      	movs	r2, #8
 8002922:	4013      	ands	r3, r2
 8002924:	2b08      	cmp	r3, #8
 8002926:	d111      	bne.n	800294c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2208      	movs	r2, #8
 800292e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f83c 	bl	80029b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2284      	movs	r2, #132	; 0x84
 800293c:	2108      	movs	r1, #8
 800293e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2278      	movs	r2, #120	; 0x78
 8002944:	2100      	movs	r1, #0
 8002946:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e02c      	b.n	80029a6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	401a      	ands	r2, r3
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	429a      	cmp	r2, r3
 800295e:	d112      	bne.n	8002986 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 f81f 	bl	80029b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2284      	movs	r2, #132	; 0x84
 8002976:	2120      	movs	r1, #32
 8002978:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2278      	movs	r2, #120	; 0x78
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e00f      	b.n	80029a6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	4013      	ands	r3, r2
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	425a      	negs	r2, r3
 8002996:	4153      	adcs	r3, r2
 8002998:	b2db      	uxtb	r3, r3
 800299a:	001a      	movs	r2, r3
 800299c:	1dfb      	adds	r3, r7, #7
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d0a4      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	; 0x38
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b8:	f3ef 8310 	mrs	r3, PRIMASK
 80029bc:	617b      	str	r3, [r7, #20]
  return(result);
 80029be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f383 8810 	msr	PRIMASK, r3
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4926      	ldr	r1, [pc, #152]	; (8002a74 <UART_EndRxTransfer+0xc4>)
 80029da:	400a      	ands	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ea:	f3ef 8310 	mrs	r3, PRIMASK
 80029ee:	623b      	str	r3, [r7, #32]
  return(result);
 80029f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	f383 8810 	msr	PRIMASK, r3
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	f383 8810 	msr	PRIMASK, r3
}
 8002a1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d118      	bne.n	8002a56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a24:	f3ef 8310 	mrs	r3, PRIMASK
 8002a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2e:	2301      	movs	r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2110      	movs	r1, #16
 8002a46:	438a      	bics	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f383 8810 	msr	PRIMASK, r3
}
 8002a54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	2120      	movs	r1, #32
 8002a5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b00e      	add	sp, #56	; 0x38
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	fffffedf 	.word	0xfffffedf

08002a78 <memset>:
 8002a78:	0003      	movs	r3, r0
 8002a7a:	1882      	adds	r2, r0, r2
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d100      	bne.n	8002a82 <memset+0xa>
 8002a80:	4770      	bx	lr
 8002a82:	7019      	strb	r1, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	e7f9      	b.n	8002a7c <memset+0x4>

08002a88 <__libc_init_array>:
 8002a88:	b570      	push	{r4, r5, r6, lr}
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	4c0c      	ldr	r4, [pc, #48]	; (8002ac0 <__libc_init_array+0x38>)
 8002a8e:	4d0d      	ldr	r5, [pc, #52]	; (8002ac4 <__libc_init_array+0x3c>)
 8002a90:	1b64      	subs	r4, r4, r5
 8002a92:	10a4      	asrs	r4, r4, #2
 8002a94:	42a6      	cmp	r6, r4
 8002a96:	d109      	bne.n	8002aac <__libc_init_array+0x24>
 8002a98:	2600      	movs	r6, #0
 8002a9a:	f000 f819 	bl	8002ad0 <_init>
 8002a9e:	4c0a      	ldr	r4, [pc, #40]	; (8002ac8 <__libc_init_array+0x40>)
 8002aa0:	4d0a      	ldr	r5, [pc, #40]	; (8002acc <__libc_init_array+0x44>)
 8002aa2:	1b64      	subs	r4, r4, r5
 8002aa4:	10a4      	asrs	r4, r4, #2
 8002aa6:	42a6      	cmp	r6, r4
 8002aa8:	d105      	bne.n	8002ab6 <__libc_init_array+0x2e>
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	00b3      	lsls	r3, r6, #2
 8002aae:	58eb      	ldr	r3, [r5, r3]
 8002ab0:	4798      	blx	r3
 8002ab2:	3601      	adds	r6, #1
 8002ab4:	e7ee      	b.n	8002a94 <__libc_init_array+0xc>
 8002ab6:	00b3      	lsls	r3, r6, #2
 8002ab8:	58eb      	ldr	r3, [r5, r3]
 8002aba:	4798      	blx	r3
 8002abc:	3601      	adds	r6, #1
 8002abe:	e7f2      	b.n	8002aa6 <__libc_init_array+0x1e>
 8002ac0:	08002b5c 	.word	0x08002b5c
 8002ac4:	08002b5c 	.word	0x08002b5c
 8002ac8:	08002b60 	.word	0x08002b60
 8002acc:	08002b5c 	.word	0x08002b5c

08002ad0 <_init>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr

08002adc <_fini>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr
